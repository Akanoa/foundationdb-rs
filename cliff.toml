# git-cliff ~ configuration file
# https://git-cliff.org/docs/configuration

[changelog]
# template for the changelog header
header = """
# Changelog\n
All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n
"""
# template for the changelog body
# https://keats.github.io/tera/docs/#introduction
body = """
{% if version -%}
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else -%}
    ## [Unreleased]
{% endif -%}
{% for group, commits in commits | unique(attribute="message") | filter(attribute="merge_commit", value=false) | group_by(attribute="group") %}
    ### {{ group | upper_first }}
    {% for commit in commits %}
        - {{ commit.message | split(pat="\n") | first | upper_first | trim }}\
    {% endfor %}
{% endfor %}\n
"""

# template for the changelog footer
footer = """
{% for release in releases -%}
    {% if release.version -%}
        {% if release.previous.version -%}
            [{{ release.version | trim_start_matches(pat="v") }}]: \
                https://github.com/foundationdb-rs}/foundationdb-rs\
                    /compare/{{ release.previous.version }}..{{ release.version }}
        {% endif -%}
    {% else -%}
        [unreleased]: https://github.com/foundationdb-rs}/foundationdb-rs\
            /compare/{{ release.previous.version }}..HEAD
    {% endif -%}
{% endfor %}
"""
# remove the leading and trailing whitespace from the templates
trim = true

[git]

# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true

# filter out the commits that are not conventional
filter_unconventional = false

# process each line of a commit as an individual commit
split_commits = false

# regex for preprocessing the commit messages
commit_preprocessors = [
    { pattern = '\n\w+(?:\-\w+)*:\s+[^\n]+', replace = "\n" },
    { pattern = '\n+', replace = "\n  " },
    { pattern = '\s+$', replace = "" }
]

commit_parsers = [
    { message = "^.*[a|A]dd", group = "<!-- 0 -->🚀 added" },
    { message = "^feat", group = "<!-- 0 -->🚀 added" },
    { message = "^.*[f|F]ix", group = "<!-- 1 -->🐛 Bug Fixes" },
    { message = "^.*[r|R]efactor", group = "<!-- 2 -->🚜 Refactor" },
    { message = "^.*[r|R]emove", group = "<!-- 2 -->🚜 Refactor" },
    { message = "^.*[b|B]ump", group = "<!-- 3 -->🆙 Bump", skip = true },
    { message = "chore: release", skip = true },
    { message = "^chore", group = "<!-- 4 -->⚙️ Other changes" },
    { message = "^.*", group = "<!-- 4 -->⚙️ Other changes" },
]

# protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = false

# filter out the commits that are not matched by commit parsers
filter_commits = false
